:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: var(--primary);
  text-decoration: inherit;
}
a:hover {
  color: var(--primary);
}

body {
  margin: 0;
  min-width: 320px;
  min-height: 100vh;
  line-height: inherit;
  color: var(--foreground);
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

/* Quill editor specific styles: ensure headings inside editor render and inherit theme */
.ql-container {
  background: transparent; /* match app background */
}
.ql-editor {
  color: inherit; /* inherit color from app (light/dark) */
  min-height: 150px;
}
.ql-editor h1,
.ql-editor h2,
.ql-editor h3 {
  margin: 0.67em 0;
  color: inherit;
}
.ql-editor h1 { font-size: 2em; }
.ql-editor h2 { font-size: 1.5em; }
.ql-editor h3 { font-size: 1.25em; }

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: var(--btn-bg);
  cursor: pointer;
  transition: border-color 0.25s, background-color 200ms ease, color 200ms ease, transform 125ms ease;
}
button:hover {
  border-color: #646cff;
  transform: translateY(-2px);
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

/* Styled select adjustments: ensure native option contrast follows theme tokens where supported */
.styled-select select,
.styled-select select:focus {
  background-color: var(--input);
  color: var(--foreground);
}

/* When browsers support styling option elements, apply app tokens (some UAs ignore option styling) */
.styled-select option {
  background-color: var(--popover);
  color: var(--popover-foreground);
}

/* Improve the arrow color by inheriting muted token */
.styled-select svg {
  color: var(--muted-text);
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: var(--primary);
  }
  button {
    background-color: var(--btn-bg);
    color: var(--btn-text);
    border-color: var(--btn-border);
  }

  /* card style in light mode */
  .card {
    background: var(--card);
    border-radius: 12px;
    box-shadow: 0 6px 18px rgba(16,24,40,0.04);
  }

  .muted {
    color: var(--muted-text);
  }
}

[data-slot="sidebar"] a,

  .group\/[sidebar-wrapper] [data-slot="sidebar"] a {
    color: var(--sidebar-foreground);
  }

  [data-slot="sidebar"] a:hover,
   {
    color: var(--primary);
    background: transparent;
  }


  /* Sidebar item theming: make icons/text follow sidebar tokens and app primary on hover */
  /* Sidebar item theming: make icons/text follow sidebar tokens
     but use the app primary color for hover/active so the sidebar
     visually ties into the app theme. Icons inherit currentColor. */
/*   [data-slot="sidebar"] a,
  [data-slot="sidebar"] button,
  .group\/[sidebar-wrapper] [data-slot="sidebar"] a {
    color: var(--sidebar-foreground);
  }

  [data-slot="sidebar"] a:hover,
  [data-slot="sidebar"] button:hover {
    color: var(--primary);
    background: transparent;
  }

  
  [data-slot="sidebar"] a[data-active="true"],
  [data-slot="sidebar"] button[data-active="true"] {
    color: var(--primary);
    background: color-mix(in oklab, var(--primary) 8%, transparent);
  }

  
  [data-slot="sidebar"] a svg,
  [data-slot="sidebar"] button svg {
    color: currentColor;
  } */

  /* Positioning for the sidebar trigger overlay that follows sidebar collapse state.
     The SidebarProvider/root wrapper uses the 'group/sidebar-wrapper' class and
     will have data-state="expanded" or "collapsed". We target that to nudge
     the trigger so it visually tracks the sidebar (uses --sidebar-width). */
  /* Sidebar trigger overlay rules removed â€” trigger is rendered inline in the header now. */
